datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  pkId             Int               @id @default(autoincrement())
  id               String            @unique @default(uuid()) @db.Uuid
  firstName        String            @map("first_name") @db.VarChar(128)
  lastName         String?           @map("last_name") @db.VarChar(128)
  username         String?            @unique @db.VarChar(128)
  phone            String?           @unique @db.VarChar(20)
  email            String            @unique @db.VarChar(255)
  password         String?            @db.VarChar(255)
  accountApiKey    String?           @unique @map("account_api_key") @db.VarChar(128)
  googleId         String?           @unique @map("google_id") @db.VarChar(128)
  affiliationCode  String?            @unique @map("affiliation_code") @db.VarChar(128)
  emailOtpSecret   String?           @map("email_otp_secret") @db.VarChar(255)
  refreshToken     String?           @unique @map("refresh_token") @db.VarChar(255)
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @map("updated_at")
  deletedAt        DateTime?         @map("deleted_at")
  emailVerifiedAt  DateTime?         @map("email_verfied_at")
  privilegeId      Int?              @map("privilege_id")
  privilege        Privilege?        @relation(fields: [privilegeId], references: [pkId], onDelete: SetNull)
  customerServices CustomerService[]
  transactions     Transaction[]
  devices          Device[]
  Group            Group[]
  Subscription     Subscription[]
  Template         Template[]
}

model CustomerService {
  pkId         Int           @id @default(autoincrement())
  id           String        @unique @default(uuid()) @db.Uuid
  username     String        @unique @db.VarChar(255)
  email        String        @unique @db.VarChar(255)
  password     String        @db.VarChar(255)
  refreshToken String?       @unique @map("refresh_token") @db.VarChar(255)
  deletedAt    DateTime?     @map("deleted_at")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  userId       Int
  deviceId     Int?          @unique
  privilegeId  Int?          @map("privilege_id")
  user         User          @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  device       Device?       @relation(fields: [deviceId], references: [pkId], onDelete: SetNull)
  privilege    Privilege?    @relation(fields: [privilegeId], references: [pkId], onDelete: SetNull)
  Order        Order[]
  OrderMessage OrderMessage?
}

model Privilege {
  pkId             Int               @id
  id               String            @unique @default(uuid()) @db.Uuid
  name             String            @db.VarChar(128)
  users            User[]
  roles            PrivilegeRole[]
  customerServices CustomerService[]
  menuPrivileges   MenuPrivilege[]
}

model PrivilegeRole {
  pkId        Int       @id @default(autoincrement())
  id          String    @unique @default(uuid()) @db.Uuid
  isVisible   Boolean
  isCreate    Boolean
  isDelete    Boolean
  isRead      Boolean
  isEdit      Boolean
  moduleId    Int       @map("module_id")
  module      Module    @relation(fields: [moduleId], references: [pkId], onDelete: Cascade)
  privilege   Privilege @relation(fields: [privilegeId], references: [pkId], onDelete: Cascade)
  privilegeId Int       @map("privilege_id")

  @@unique([moduleId, privilegeId])
}

model Menu {
  pkId           Int             @id @default(autoincrement())
  id             String          @unique @default(uuid()) @db.Uuid
  name           String          @db.VarChar(128)
  type           String          @db.VarChar(128)
  path           String          @db.VarChar(255)
  isActive       Boolean         @map("is_active")
  menuPrivileges MenuPrivilege[]
}

model MenuPrivilege {
  pkId        Int       @id @default(autoincrement())
  id          String    @unique @default(uuid()) @db.Uuid
  menu        Menu      @relation(fields: [menuId], references: [pkId])
  menuId      Int       @map("menu_id")
  privilege   Privilege @relation(fields: [privilegeId], references: [pkId], onDelete: Cascade)
  privilegeId Int       @map("privilege_id")
}

model Module {
  pkId           Int             @id @default(autoincrement())
  id             String          @unique @default(uuid()) @db.Uuid
  name           String          @db.VarChar(128)
  controller     String          @db.VarChar(255)
  privilegeRoles PrivilegeRole[]
}

model SubscriptionPlan {
  pkId                  Int            @id @default(autoincrement())
  id                    String         @unique @default(uuid()) @db.Uuid
  name                  String         @unique @db.VarChar(128)
  monthlyPrice          Decimal        @map("monthly_price") @db.Decimal(10, 2)
  yearlyPrice           Decimal        @map("yearly_price") @db.Decimal(10, 2)
  autoReplyQuota        Int?
  broadcastQuota        Int?
  contactQuota          Int?
  deviceQuota           Int?
  isIntegration         Boolean?
  isGoogleContactSync   Boolean?
  isWhatsappContactSync Boolean?
  isAvailable           Boolean        @default(true) @map("is_available")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @default(now()) @map("updated_at")
  transactions          Transaction[]
  Subscription          Subscription[]
}

model Subscription {
  pkId               Int              @id @default(autoincrement())
  startDate          DateTime
  endDate            DateTime
  autoReplyUsed      Int              @default(0)
  broadcastUsed      Int              @default(0)
  contactUsed        Int              @default(0)
  deviceUsed         Int              @default(0)
  autoReplyMax       Int              @default(0)
  broadcastMax       Int              @default(0)
  contactMax         Int              @default(0)
  deviceMax          Int              @default(0)
  subscriptionPlanId Int
  userId             Int
  user               User             @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @default(now()) @map("updated_at")
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [pkId], onDelete: Cascade)
}

model Transaction {
  pkId               Int              @id @default(autoincrement())
  id                 String           @unique @map("order_id") @db.VarChar(128)
  paidPrice          Decimal          @map("paid_price") @db.Decimal(10, 2)
  status             String?
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @default(now()) @map("updated_at")
  userId             Int
  subscriptionPlanId Int
  user               User             @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [pkId], onDelete: Cascade)
}

model Device {
  pkId            Int              @id @default(autoincrement())
  id              String           @unique @default(uuid()) @db.Uuid
  name            String           @db.VarChar(128)
  phone           String?          @db.VarChar(20)
  apiKey          String           @unique @map("api_key") @db.VarChar(255)
  status          String           @default("close") @map("status") @db.VarChar(20)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @map("updated_at")
  userId          Int
  user            User             @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  sessions        Session[]
  autoReplies     AutoReply[]
  campaigns       Campaign[]
  contactDevices  ContactDevice[]
  DeviceLabel     DeviceLabel[]
  Broadcast       Broadcast[]
  BusinessHour    BusinessHour[]
  CustomerService CustomerService?
  DeviceLog       DeviceLog[]
}

model DeviceLog {
  pkId      Int      @id @default(autoincrement())
  id        String   @unique @default(uuid()) @db.Uuid
  status    String   @db.VarChar(20)
  deviceId  Int
  sessionId String?
  device    Device   @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model Session {
  pkId      Int    @id @default(autoincrement())
  id        String
  sessionId String
  data      String @db.Text
  deviceId  Int
  device    Device @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)

  @@unique([sessionId, id], map: "unique_id_per_session_id_session")
  @@index([sessionId])
}

model Contact {
  pkId            Int               @id @default(autoincrement())
  id              String            @unique @default(uuid()) @db.Uuid
  firstName       String            @db.VarChar(128)
  lastName        String?           @db.VarChar(128)
  phone           String            @db.VarChar(20)
  email           String?           @db.VarChar(255)
  gender          String?           @db.VarChar(10)
  dob             DateTime?         @db.Date
  colorCode       String?           @db.VarChar(6)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")
  contactGroups   ContactGroup[]
  contactDevices  ContactDevice[]
  ContactLabel    ContactLabel[]
  OutgoingMessage OutgoingMessage[]
  IncomingMessage IncomingMessage[]
}

model Label {
  pkId         Int            @id @unique @default(autoincrement())
  name         String         @db.VarChar(128)
  slug         String         @unique @db.VarChar(128)
  DeviceLabel  DeviceLabel[]
  ContactLabel ContactLabel[]
}

model DeviceLabel {
  pkId      Int      @id @unique @default(autoincrement())
  deviceId  Int
  labelId   Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  device    Device   @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [pkId], onDelete: Cascade)

  @@unique([deviceId, labelId])
}

model ContactLabel {
  id        Int      @id @unique @default(autoincrement())
  contactId Int
  labelId   Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  contact   Contact  @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [pkId], onDelete: Cascade)

  @@unique([contactId, labelId])
}

model ContactGroup {
  pkId      Int     @id @default(autoincrement())
  id        String  @unique @default(uuid()) @db.Uuid
  contactId Int
  groupId   Int
  contact   Contact @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
  group     Group   @relation(fields: [groupId], references: [pkId], onDelete: Cascade)

  @@unique([contactId, groupId])
}

model ContactDevice {
  pkId      Int     @id @default(autoincrement())
  id        String  @unique @default(uuid()) @db.Uuid
  contactId Int
  deviceId  Int
  contact   Contact @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
  device    Device  @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)

  @@unique([contactId, deviceId])
}

model Group {
  pkId          Int            @id @default(autoincrement())
  id            String         @unique @default(uuid()) @db.Uuid
  name          String         @db.VarChar(128)
  type          String         @db.VarChar(128)
  userId        Int
  user          User           @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  contactGroups ContactGroup[]
  campaigns     Campaign[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
}

model OutgoingMessage {
  pkId      Int      @id @default(autoincrement())
  id        String   @unique
  to        String
  message   String?
  mediaPath String?
  schedule  DateTime
  status    String   @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  sessionId String?
  contactId Int?
  contact   Contact? @relation(fields: [contactId], references: [pkId], onDelete: Cascade)

  @@unique([sessionId, to, id], map: "unique_outgoing_message_key_per_session_id")
}

model IncomingMessage {
  pkId       Int      @id @default(autoincrement())
  id         String   @unique
  from       String
  message    String
  mediaPath  String?
  receivedAt DateTime @map("received_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  sessionId  String?
  contactId  Int?
  contact    Contact? @relation(fields: [contactId], references: [pkId], onDelete: Cascade)
}

model Broadcast {
  pkId       Int      @id @default(autoincrement())
  id         String   @unique @default(uuid()) @db.Uuid
  name       String   @db.VarChar(128)
  status     Boolean  @default(true)
  recipients String[]
  message    String   @db.VarChar(255)
  schedule   DateTime
  delay      Int
  isSent     Boolean  @default(false)
  mediaPath  String?
  deviceId   Int
  device     Device   @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
}

model AutoReply {
  pkId       Int      @id @default(autoincrement())
  id         String   @unique @default(uuid()) @db.Uuid
  name       String   @db.VarChar(128)
  requests   String[]
  response   String   @db.VarChar(255)
  status     Boolean  @default(true)
  recipients String[]
  mediaPath  String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  deviceId   Int
  device     Device   @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
}

model Campaign {
  pkId                 Int               @id @default(autoincrement())
  id                   String            @unique @default(uuid()) @db.Uuid
  name                 String            @db.VarChar(128)
  status               Boolean           @default(true)
  registrationSyntax   String            @unique @map("registration_syntax") @db.VarChar(128)
  unregistrationSyntax String            @unique @map("unregistration_syntax") @db.VarChar(128)
  registrationMessage  String            @map("registration_message") @db.VarChar(255)
  successMessage       String            @map("message_registered") @db.VarChar(255)
  failedMessage        String            @map("message_failed") @db.VarChar(255)
  unregisteredMessage  String            @map("message_unregistered") @db.VarChar(255)
  recipients           String[]
  delay                Int
  isSent               Boolean           @default(false)
  schedule             DateTime
  mediaPath            String?
  groupId              Int               @map("group_id")
  deviceId             Int               @map("device_id")
  group                Group             @relation(fields: [groupId], references: [pkId], onDelete: Cascade)
  device               Device            @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
  CampaignMessage      CampaignMessage[]
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @default(now()) @map("updated_at")
}

model CampaignMessage {
  pkId       Int      @id @default(autoincrement())
  id         String   @unique @default(uuid()) @db.Uuid
  name       String   @db.VarChar(128)
  campaignId Int      @map("campaign_id")
  message    String
  delay      Int
  status               Boolean           @default(true)
  isSent     Boolean  @default(false)
  schedule   DateTime @map("schedule")
  mediaPath  String?
  Campaign   Campaign @relation(fields: [campaignId], references: [pkId], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
}

model BusinessHour {
  pkId     Int    @id @default(autoincrement())
  id       String @unique @default(uuid()) @db.Uuid
  message  String
  monStart Int?   @default(1440) @map("mon_start")
  monEnd   Int?   @default(0) @map("mon_end")
  tueStart Int?   @default(1440) @map("tue_start")
  tueEnd   Int?   @default(0) @map("tue_end")
  wedStart Int?   @default(1440) @map("wed_start")
  wedEnd   Int?   @default(0) @map("wed_end")
  thuStart Int?   @default(1440) @map("thu_start")
  thuEnd   Int?   @default(0) @map("thu_end")
  friStart Int?   @default(1440) @map("fri_start")
  friEnd   Int?   @default(0) @map("fri_end")
  satStart Int?   @default(1440) @map("sat_start")
  satEnd   Int?   @default(0) @map("sat_end")
  sunStart Int?   @default(1440) @map("sun_start")
  sunEnd   Int?   @default(0) @map("sun_end")
  timeZone String @map("timezone") @db.VarChar(128)
  deviceId Int    @unique
  device   Device @relation(fields: [deviceId], references: [pkId], onDelete: Cascade)
}

model Order {
  pkId      Int             @id @default(autoincrement())
  id        String          @unique @default(uuid()) @db.Uuid
  name      String          @db.VarChar(128)
  phone     String?
  orderData String
  status    String          @default("pending") @db.VarChar(20)
  csId      Int
  cs        CustomerService @relation(fields: [csId], references: [pkId], onDelete: Cascade)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @default(now()) @map("updated_at")
}

model OrderMessage {
  pkId            Int             @id @default(autoincrement())
  id              String          @unique @default(uuid()) @db.Uuid
  orderTemplate   String
  welcomeMessage  String
  processMessage  String
  completeMessage String
  csId            Int             @unique
  cs              CustomerService @relation(fields: [csId], references: [pkId], onDelete: Cascade)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @default(now()) @map("updated_at")
}

model Template {
  pkId      Int      @id @default(autoincrement())
  id        String   @unique @default(uuid()) @db.Uuid
  name      String   @db.VarChar(128)
  message   String
  userId    Int
  user      User     @relation(fields: [userId], references: [pkId], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model PasswordReset {
  pkId              Int      @id @default(autoincrement())
  id                String   @unique @default(uuid()) @db.Uuid
  email             String   @unique @db.VarChar(255)
  token             String   @unique @db.VarChar(255)
  resetTokenExpires DateTime @map("reset_token_expires")
  createdAt         DateTime @default(now()) @map("created_at")
}

model Message {
  pkId                            BigInt   @id @default(autoincrement())
  sessionId                       String?
  remoteJid                       String
  id                              String
  agentId                         String?
  bizPrivacyStatus                Int?
  broadcast                       Boolean?
  clearMedia                      Boolean?
  duration                        Int?
  ephemeralDuration               Int?
  ephemeralOffToOn                Boolean?
  ephemeralOutOfSync              Boolean?
  ephemeralStartTimestamp         BigInt?
  finalLiveLocation               Json?
  futureproofData                 Bytes?
  ignore                          Boolean?
  keepInChat                      Json?
  key                             Json
  labels                          Json?
  mediaCiphertextSha256           Bytes?
  mediaData                       Json?
  message                         Json?
  messageC2STimestamp             BigInt?
  messageSecret                   Bytes?
  messageStubParameters           Json?
  messageStubType                 Int?
  messageTimestamp                BigInt?
  multicast                       Boolean?
  originalSelfAuthorUserJidString String?
  participant                     String?
  paymentInfo                     Json?
  photoChange                     Json?
  pollAdditionalMetadata          Json?
  pollUpdates                     Json?
  pushName                        String?
  quotedPaymentInfo               Json?
  quotedStickerData               Json?
  reactions                       Json?
  revokeMessageTimestamp          BigInt?
  starred                         Boolean?
  status                          Int?
  statusAlreadyViewed             Boolean?
  statusPsa                       Json?
  urlNumber                       Boolean?
  urlText                         Boolean?
  userReceipt                     Json?
  verifiedBizName                 String?

  @@unique([sessionId, remoteJid, id], map: "unique_message_key_per_session_id")
  @@index([sessionId])
}
